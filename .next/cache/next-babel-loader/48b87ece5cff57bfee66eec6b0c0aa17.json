{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport Nav from 'client/components/Nav';\nimport { UserContext } from 'pages/_app';\nexport default function Show() {\n  const userContext = useContext(UserContext);\n  const postsUrl = process.env.getPostsUrl;\n  const {\n    0: post,\n    1: setPost\n  } = useState(); // console.log(post)\n\n  useEffect(() => {\n    const id = Number(window.location.pathname.split(\"/\")[2]);\n    console.log(id);\n    fetch(postsUrl + `/${id}`).then(res => res.json()).then(post => {\n      console.log(post);\n      setPost(post);\n    }).catch(err => console.log(err));\n    return () => {// cleanup\n    };\n  }, []);\n  const va = 'test';\n  return __jsx(\"div\", null, post && __jsx(\"div\", {\n    className: \"text-container\",\n    dangerouslySetInnerHTML: {\n      __html: post.content.rendered\n    }\n  }), __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", null, \"Return\")), post && post.author == userContext.loginState.id && __jsx(Link, {\n    href: \"/posts/[id]/edit\",\n    as: `/posts/${post.id}/edit`\n  }, __jsx(\"a\", null, \"Edit\")));\n} // return (\n//   <div>\n//     <div className=\"text-container\" dangerouslySetInnerHTML={{ __html: post.content.rendered }} />\n//     <Link href=\"/\"><a>Return</a></Link>\n//     {post.author == userContext.loginState.id && <Link href=\"[id]/edit\" as={`${post.id}/edit`}><a>Edit</a></Link>}\n//   </div>\n// )\n//      <h1>Title: {post.title.rendered}</h1>\n//      <p>Post time: {post.date}</p>\n//      <p>this is a show</p>\n//      <p>this is the content {JSON.stringify(post)}</p>\n// Show.getInitialProps = async (context) => {\n//   const {id} = context.query\n//   const res = await fetch(`http://wp:80/wp-json/wp/v2/posts/${id}`)\n//   const json = await res.json()\n//   return { post: json }\n// }\n// export async function getStaticPaths() {\n//   // Call an external API endpoint to get posts\n//   const res = await fetch('http://localhost:80/wp-json/wp/v2/posts')\n//   console.log(res)\n//   const posts = await res.json()\n//   console.log(posts)\n//   // Get the paths we want to pre-render based on posts\n//   const paths = posts.map((post) => `/posts/${post.id}`)\n//   // We'll pre-render only these paths at build time.\n//   // { fallback: false } means other routes should 404.\n//   return { paths, fallback: false }\n// }\n// export async function getStaticProps({ params }) {\n//   // params contains the post `id`.\n//   // If the route is like /posts/1, then params.id is 1\n//   const res = await fetch(`http://localhost/wp-json/wp/v2/posts/${params.id}`)\n//   const post = await res.json()\n//   // Pass post data to the page via props\n//   return { props: { post } }\n// }","map":{"version":3,"sources":["/Users/jtweng/Desktop/record/OSU/mac/practice/docker/test/pages/posts/[id].js"],"names":["React","useContext","useEffect","useState","Link","Nav","UserContext","Show","userContext","postsUrl","process","env","getPostsUrl","post","setPost","id","Number","window","location","pathname","split","console","log","fetch","then","res","json","catch","err","va","__html","content","rendered","author","loginState"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,UAAd,EAAyBC,SAAzB,EAAmCC,QAAnC,QAAkD,OAAlD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAAQC,WAAR,QAA0B,YAA1B;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC7B,QAAMC,WAAW,GAAGP,UAAU,CAACK,WAAD,CAA9B;AACA,QAAMG,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAA7B;AACA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBX,QAAQ,EAAhC,CAH6B,CAI7B;;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,EAAE,GAAGC,MAAM,CAACC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAAD,CAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,EAAZ;AACAQ,IAAAA,KAAK,CAACd,QAAQ,GAAE,IAAGM,EAAG,EAAjB,CAAL,CACCS,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMX,IAAI,IAAI;AACZQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACAC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KALD,EAMCc,KAND,CAMOC,GAAG,IAAEP,OAAO,CAACC,GAAR,CAAYM,GAAZ,CANZ;AAOA,WAAO,MAAM,CACX;AACD,KAFD;AAGD,GAbQ,EAaN,EAbM,CAAT;AAeE,QAAMC,EAAE,GAAC,MAAT;AACF,SACI,mBACGhB,IAAI,IAAI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAgC,IAAA,uBAAuB,EAAE;AAAEiB,MAAAA,MAAM,EAAEjB,IAAI,CAACkB,OAAL,CAAaC;AAAvB;AAAzD,IADX,EAEE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KAAe,0BAAf,CAFF,EAGGnB,IAAI,IAAIA,IAAI,CAACoB,MAAL,IAAezB,WAAW,CAAC0B,UAAZ,CAAuBnB,EAA9C,IAAoD,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,kBAAX;AAA8B,IAAA,EAAE,EAAG,UAASF,IAAI,CAACE,EAAG;AAApD,KAA4D,wBAA5D,CAHvD,CADJ;AAOD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React,{useContext,useEffect,useState} from 'react'\nimport Link from 'next/link'\nimport Nav from 'client/components/Nav'\nimport {UserContext} from 'pages/_app'\n\nexport default function Show() {\n  const userContext = useContext(UserContext)\n  const postsUrl = process.env.getPostsUrl\n  const [post, setPost] = useState()\n  // console.log(post)\n\n  useEffect(() => {\n    const id = Number(window.location.pathname.split(\"/\")[2])\n    console.log(id)\n    fetch(postsUrl+`/${id}`)\n    .then(res => res.json())\n    .then(post => {\n      console.log(post)\n      setPost(post)\n    })\n    .catch(err=>console.log(err))\n    return () => {\n      // cleanup\n    }\n  }, [])\n\n    const va='test'\n  return (\n      <div>\n        {post && <div className=\"text-container\" dangerouslySetInnerHTML={{ __html: post.content.rendered }} />}\n        <Link href=\"/\"><a>Return</a></Link>\n        {post && post.author == userContext.loginState.id && <Link href=\"/posts/[id]/edit\" as={`/posts/${post.id}/edit`}><a>Edit</a></Link>}\n      </div>\n  )\n}\n\n// return (\n//   <div>\n//     <div className=\"text-container\" dangerouslySetInnerHTML={{ __html: post.content.rendered }} />\n//     <Link href=\"/\"><a>Return</a></Link>\n//     {post.author == userContext.loginState.id && <Link href=\"[id]/edit\" as={`${post.id}/edit`}><a>Edit</a></Link>}\n//   </div>\n// )\n\n\n//      <h1>Title: {post.title.rendered}</h1>\n//      <p>Post time: {post.date}</p>\n//      <p>this is a show</p>\n//      <p>this is the content {JSON.stringify(post)}</p>\n// Show.getInitialProps = async (context) => {\n//   const {id} = context.query\n//   const res = await fetch(`http://wp:80/wp-json/wp/v2/posts/${id}`)\n//   const json = await res.json()\n//   return { post: json }\n// }\n\n// export async function getStaticPaths() {\n//   // Call an external API endpoint to get posts\n//   const res = await fetch('http://localhost:80/wp-json/wp/v2/posts')\n//   console.log(res)\n//   const posts = await res.json()\n//   console.log(posts)\n\n//   // Get the paths we want to pre-render based on posts\n//   const paths = posts.map((post) => `/posts/${post.id}`)\n\n//   // We'll pre-render only these paths at build time.\n//   // { fallback: false } means other routes should 404.\n//   return { paths, fallback: false }\n// }\n\n// export async function getStaticProps({ params }) {\n//   // params contains the post `id`.\n//   // If the route is like /posts/1, then params.id is 1\n//   const res = await fetch(`http://localhost/wp-json/wp/v2/posts/${params.id}`)\n//   const post = await res.json()\n\n//   // Pass post data to the page via props\n//   return { props: { post } }\n// }\n"]},"metadata":{},"sourceType":"module"}