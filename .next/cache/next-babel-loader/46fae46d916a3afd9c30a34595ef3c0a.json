{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { Component, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Link from 'next/link';\nimport ListLists from './listlists';\nvar POSTS_SERVICE_URL = 'http://wp:80/wp-json/wp/v2/posts';\nexport default function List() {\n  _s();\n\n  var _useState = useState({\n    posts: []\n  }),\n      data = _useState[0],\n      setData = _useState[1];\n\n  console.log(data);\n  useEffect(function () {\n    console.log(\"in useEffect\");\n\n    var fetchUsers = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(POSTS_SERVICE_URL);\n                _context.next = 3;\n                return axios.get(POSTS_SERVICE_URL);\n\n              case 3:\n                response = _context.sent;\n                console.log(response);\n                setData(response.data);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchUsers() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    console.log(\"finish function setup\");\n    fetchUsers();\n    console.log(\"run the function\");\n  }, []); // Runs once\n  // useEffect(() => {\n  //   const fetchUsers = async () => {\n  //     try {\n  //       console.log(POSTS_SERVICE_URL);\n  //       setData({ ...data, isFetching: true });\n  //       const response = await axios.get(POSTS_SERVICE_URL);\n  //       setData({\n  //         ...data,\n  //         posts: response.data,\n  //         isFetching: false\n  //       });\n  //     } catch (e) {\n  //       console.log(e);\n  //       setData({ ...data, isFetching: false });\n  //     }\n  //   };\n  //   fetchUsers();\n  // }, []); // Runs once\n  // constructor(props) => {\n  //   super(props)\n  //   this.state = {\n  //     isFetching: false,\n  //     posts: []\n  //   }\n  // }\n  // componentDidMount = () => {\n  //   this.fetchPosts()\n  // }\n  // let fetchPostsAsync = async() => {\n  //   try {\n  //     this.setState({ ...this.state, isFetching: true }); // Sets loading state.\n  //     const response = await axios.get(POSTS_SERVICE_URL);\n  //     this.setState({\n  //       ...this.state,\n  //       isFetching: false,\n  //       posts: response.data\n  //     });\n  //   } catch (e) {\n  //     console.log(e);\n  //     this.setState({ ...this.state, isFetching: false });\n  //   }\n  // }\n  // fetchPosts = this.fetchPostsAsync\n\n  console.log(data);\n  console.log(data.posts);\n  var postList = data.posts.map(function (post) {\n    return __jsx(\"div\", null, __jsx(Link, {\n      href: \"/posts/[id]\",\n      as: \"/posts/\".concat(post.id)\n    }, __jsx(\"a\", {\n      key: post.id,\n      postData: \"\".concat(post)\n    }, __jsx(\"h2\", null, \"Title: \", post.title.rendered))), __jsx(\"p\", null, \"Status: \", post.status), __jsx(\"p\", null, \"Content: \", post.content.rendered));\n  });\n  console.log(postList);\n  return __jsx(\"div\", null, postList);\n} // Next.js\n// const List = ({ posts }) => {\n//   const postList = posts.map(post =>\n//     <div>\n//       <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n//         <a key={post.id} postData={`${post}`}>\n//           <h2>Title: {post.title.rendered}</h2></a></Link>\n//       <p>Status: {post.status}</p>\n//       <p>Content: {post.content.rendered}</p>\n//     </div>)\n//   return <div>{postList}</div>\n// }\n// Next.js server side\n// List.getInitialProps = async ({ req }) => {\n//   const res = await fetch('http://wp:80/wp-json/wp/v2/posts')\n//   const json = await res.json()\n//   return { posts: json }\n// }\n// ----------------------\n// Next.js static\n// export async function getStaticProps() {\n//   // Call an external API endpoint to get posts\n//   const res = await fetch('http://wp:80/wp-json/wp/v2/posts')\n//   const posts = await res.json()\n//   // By returning { props: posts }, the Blog component\n//   // will receive `posts` as a prop at build time\n//   return {\n//     props: {\n//       posts,\n//     },\n//   }\n// }\n\n_s(List, \"S3VoA+JtSW0AIM1iVAz5uQSb2SE=\");\n\n_c = List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/home/node/app/pages/posts/list.js"],"names":["React","Component","useEffect","useState","axios","Link","ListLists","POSTS_SERVICE_URL","List","posts","data","setData","console","log","fetchUsers","get","response","postList","map","post","id","title","rendered","status","content"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,IAAMC,iBAAiB,GAAG,kCAA1B;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAAA,kBAELL,QAAQ,CAAC;AAAEM,IAAAA,KAAK,EAAE;AAAT,GAAD,CAFH;AAAA,MAEtBC,IAFsB;AAAA,MAEhBC,OAFgB;;AAG7BC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEAR,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AACA,QAAMC,UAAU;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBF,gBAAAA,OAAO,CAACC,GAAR,CAAYN,iBAAZ;AADiB;AAAA,uBAEMH,KAAK,CAACW,GAAN,CAAUR,iBAAV,CAFN;;AAAA;AAEXS,gBAAAA,QAFW;AAGjBJ,gBAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACAL,gBAAAA,OAAO,CAACK,QAAQ,CAACN,IAAV,CAAP;;AAJiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAVI,UAAU;AAAA;AAAA;AAAA,OAAhB;;AAMAF,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAC,IAAAA,UAAU;AACVF,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,GAXQ,EAWN,EAXM,CAAT,CAL6B,CAgBrB;AAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACD,KAAjB;AACA,MAAMQ,QAAQ,GAAGP,IAAI,CAACD,KAAL,CAAWS,GAAX,CAAe,UAAAC,IAAI;AAAA,WAChC,mBACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,aAAX;AAAyB,MAAA,EAAE,mBAAYA,IAAI,CAACC,EAAjB;AAA3B,OACE;AAAG,MAAA,GAAG,EAAED,IAAI,CAACC,EAAb;AAAiB,MAAA,QAAQ,YAAKD,IAAL;AAAzB,OACE,6BAAYA,IAAI,CAACE,KAAL,CAAWC,QAAvB,CADF,CADF,CADF,EAIE,6BAAYH,IAAI,CAACI,MAAjB,CAJF,EAKE,8BAAaJ,IAAI,CAACK,OAAL,CAAaF,QAA1B,CALF,CADgC;AAAA,GAAnB,CAAjB;AAQAV,EAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ;AAEA,SAAO,mBAAMA,QAAN,CAAP;AACD,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAjHwBT,I;;KAAAA,I","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Link from 'next/link'\nimport ListLists from './listlists'\n\nconst POSTS_SERVICE_URL = 'http://wp:80/wp-json/wp/v2/posts';\n\nexport default function List() {\n\n  const [data, setData] = useState({ posts: []});\n  console.log(data);\n\n  useEffect(() => {\n    console.log(\"in useEffect\");\n    const fetchUsers = async () => {\n      console.log(POSTS_SERVICE_URL);\n      const response = await axios.get(POSTS_SERVICE_URL);\n      console.log(response);\n      setData(response.data);\n    };\n    console.log(\"finish function setup\");\n    fetchUsers();\n    console.log(\"run the function\");\n  }, []); // Runs once\n\n  // useEffect(() => {\n  //   const fetchUsers = async () => {\n  //     try {\n  //       console.log(POSTS_SERVICE_URL);\n  //       setData({ ...data, isFetching: true });\n  //       const response = await axios.get(POSTS_SERVICE_URL);\n  //       setData({\n  //         ...data,\n  //         posts: response.data,\n  //         isFetching: false\n  //       });\n  //     } catch (e) {\n  //       console.log(e);\n  //       setData({ ...data, isFetching: false });\n  //     }\n  //   };\n  //   fetchUsers();\n  // }, []); // Runs once\n\n  // constructor(props) => {\n  //   super(props)\n\n  //   this.state = {\n  //     isFetching: false,\n  //     posts: []\n  //   }\n  // }\n\n  // componentDidMount = () => {\n  //   this.fetchPosts()\n  // }\n\n  // let fetchPostsAsync = async() => {\n  //   try {\n  //     this.setState({ ...this.state, isFetching: true }); // Sets loading state.\n  //     const response = await axios.get(POSTS_SERVICE_URL);\n  //     this.setState({\n  //       ...this.state,\n  //       isFetching: false,\n  //       posts: response.data\n  //     });\n  //   } catch (e) {\n  //     console.log(e);\n  //     this.setState({ ...this.state, isFetching: false });\n  //   }\n  // }\n\n  // fetchPosts = this.fetchPostsAsync\n\n  console.log(data);\n  console.log(data.posts);\n  const postList = data.posts.map(post =>\n      <div>\n        <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n          <a key={post.id} postData={`${post}`}>\n            <h2>Title: {post.title.rendered}</h2></a></Link>\n        <p>Status: {post.status}</p>\n        <p>Content: {post.content.rendered}</p>\n      </div>)\n  console.log(postList);\n\n  return <div>{postList}</div>\n}\n// Next.js\n// const List = ({ posts }) => {\n//   const postList = posts.map(post =>\n//     <div>\n//       <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n//         <a key={post.id} postData={`${post}`}>\n//           <h2>Title: {post.title.rendered}</h2></a></Link>\n//       <p>Status: {post.status}</p>\n//       <p>Content: {post.content.rendered}</p>\n//     </div>)\n//   return <div>{postList}</div>\n// }\n// Next.js server side\n// List.getInitialProps = async ({ req }) => {\n//   const res = await fetch('http://wp:80/wp-json/wp/v2/posts')\n//   const json = await res.json()\n//   return { posts: json }\n// }\n// ----------------------\n// Next.js static\n// export async function getStaticProps() {\n//   // Call an external API endpoint to get posts\n//   const res = await fetch('http://wp:80/wp-json/wp/v2/posts')\n//   const posts = await res.json()\n\n//   // By returning { props: posts }, the Blog component\n//   // will receive `posts` as a prop at build time\n//   return {\n//     props: {\n//       posts,\n//     },\n//   }\n// }\n\n"]},"metadata":{},"sourceType":"module"}