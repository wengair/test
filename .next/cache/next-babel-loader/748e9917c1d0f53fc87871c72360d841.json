{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component, useEffect, useState, useLayoutEffect } from 'react';\nimport Link from 'next/link';\nimport styles from '../styles/List.module.css';\nexport default function List() {\n  const postsUrl = process.env.getPostsUrl;\n\n  const useFetch = (url, options) => {\n    const [response, setResponse] = React.useState(null);\n    const [error, setError] = React.useState(null);\n    React.useEffect(() => {\n      const fetchData = async () => {\n        try {\n          const res = await fetch(url, options);\n          const json = await res.json();\n          setResponse(json);\n        } catch (error) {\n          setError(error);\n          console.log(error);\n        }\n      };\n\n      fetchData();\n    }, []);\n    return {\n      response,\n      error\n    };\n  };\n\n  const res = useFetch(postsUrl, {});\n\n  if (!res.response) {\n    return __jsx(\"div\", null, \"Loading...\");\n  }\n\n  const data = res.response; // console.log(\"from list.js\")\n  // console.log(data)\n\n  const postList = data.map((post, index) => __jsx(\"div\", {\n    className: styles.postContainer,\n    key: post.id\n  }, __jsx(Link, {\n    href: \"/posts/[id]\",\n    as: `/posts/${post.id}`\n  }, __jsx(\"a\", null, __jsx(\"h2\", null, \"Title: \", post.title.rendered))), __jsx(\"p\", null, \"Status: \", post.status), __jsx(\"div\", {\n    className: `text-container ${styles.contentStyle}`,\n    dangerouslySetInnerHTML: {\n      __html: post.content.rendered\n    }\n  }))); // console.log(postList);\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    }\n  }, __jsx(\"div\", {\n    style: {\n      width: '80vw'\n    }\n  }, postList));\n}","map":{"version":3,"sources":["/Users/jtweng/Desktop/record/OSU/mac/practice/docker/test/client/components/list.js"],"names":["React","Component","useEffect","useState","useLayoutEffect","Link","styles","List","postsUrl","process","env","getPostsUrl","useFetch","url","options","response","setResponse","error","setError","fetchData","res","fetch","json","console","log","data","postList","map","post","index","postContainer","id","title","rendered","status","contentStyle","__html","content","display","justifyContent","alignItems","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,EAAgDC,eAAhD,QAAuE,OAAvE;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AAGA,eAAe,SAASC,IAAT,GAAgB;AAC7B,QAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAA7B;;AAEA,QAAMC,QAAQ,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACjC,UAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BhB,KAAK,CAACG,QAAN,CAAe,IAAf,CAAhC;AACA,UAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBlB,KAAK,CAACG,QAAN,CAAe,IAAf,CAA1B;AACAH,IAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AACpB,YAAMiB,SAAS,GAAG,YAAY;AAC5B,YAAI;AACF,gBAAMC,GAAG,GAAG,MAAMC,KAAK,CAACR,GAAD,EAAMC,OAAN,CAAvB;AACA,gBAAMQ,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAJ,EAAnB;AACAN,UAAAA,WAAW,CAACM,IAAD,CAAX;AACD,SAJD,CAIE,OAAOL,KAAP,EAAc;AACdC,UAAAA,QAAQ,CAACD,KAAD,CAAR;AACAM,UAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACD;AACF,OATD;;AAUAE,MAAAA,SAAS;AACZ,KAZC,EAYC,EAZD;AAaF,WAAO;AAAEJ,MAAAA,QAAF;AAAYE,MAAAA;AAAZ,KAAP;AACC,GAjBD;;AAmBA,QAAMG,GAAG,GAAGR,QAAQ,CAACJ,QAAD,EAAW,EAAX,CAApB;;AACA,MAAI,CAACY,GAAG,CAACL,QAAT,EAAmB;AACjB,WAAO,gCAAP;AACD;;AAED,QAAMU,IAAI,GAAGL,GAAG,CAACL,QAAjB,CA3B6B,CA4B7B;AACA;;AACA,QAAMW,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KACtB;AAAK,IAAA,SAAS,EAAEvB,MAAM,CAACwB,aAAvB;AAAsC,IAAA,GAAG,EAAEF,IAAI,CAACG;AAAhD,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,aAAX;AAAyB,IAAA,EAAE,EAAG,UAASH,IAAI,CAACG,EAAG;AAA/C,KACE,iBACE,6BAAYH,IAAI,CAACI,KAAL,CAAWC,QAAvB,CADF,CADF,CADF,EAIE,6BAAYL,IAAI,CAACM,MAAjB,CAJF,EAKE;AAAK,IAAA,SAAS,EAAG,kBAAiB5B,MAAM,CAAC6B,YAAa,EAAtD;AAAyD,IAAA,uBAAuB,EAAE;AAAEC,MAAAA,MAAM,EAAER,IAAI,CAACS,OAAL,CAAaJ;AAAvB;AAAlF,IALF,CADa,CAAjB,CA9B6B,CAsC7B;;AAEA,SAAQ;AAAK,IAAA,KAAK,EAAE;AAACK,MAAAA,OAAO,EAAE,MAAV;AACCC,MAAAA,cAAc,EAAE,QADjB;AAECC,MAAAA,UAAU,EAAE;AAFb;AAAZ,KAGE;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAC;AAAP;AAAZ,KACGf,QADH,CAHF,CAAR;AAQD","sourcesContent":["import React, { Component, useEffect, useState, useLayoutEffect } from 'react'\nimport Link from 'next/link'\nimport styles from '../styles/List.module.css'\n\n\nexport default function List() {\n  const postsUrl = process.env.getPostsUrl\n\n  const useFetch = (url, options) => {\n    const [response, setResponse] = React.useState(null);\n    const [error, setError] = React.useState(null);\n    React.useEffect(() => {\n      const fetchData = async () => {\n        try {\n          const res = await fetch(url, options);\n          const json = await res.json();\n          setResponse(json);\n        } catch (error) {\n          setError(error);\n          console.log(error)\n        }\n      };\n      fetchData();\n  }, []);\n  return { response, error };\n  };\n\n  const res = useFetch(postsUrl, {});\n  if (!res.response) {\n    return <div>Loading...</div>\n  }\n\n  const data = res.response\n  // console.log(\"from list.js\")\n  // console.log(data)\n  const postList = data.map((post, index) =>\n      <div className={styles.postContainer} key={post.id}>\n        <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n          <a>\n            <h2>Title: {post.title.rendered}</h2></a></Link>\n        <p>Status: {post.status}</p>\n        <div className={`text-container ${styles.contentStyle}`} dangerouslySetInnerHTML={{ __html: post.content.rendered }} />\n      </div>)\n  // console.log(postList);\n\n  return (<div style={{display: 'flex',\n                       justifyContent: 'center',\n                       alignItems: 'center'}}>\n            <div style={{width:'80vw'}}>\n              {postList}\n            </div>\n          </div>\n  )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}