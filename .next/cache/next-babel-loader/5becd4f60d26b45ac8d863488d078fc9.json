{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect } from 'react';\nimport Link from 'next/link';\nimport Nav from 'client/components/Nav';\nimport { UserContext } from 'pages/_app';\nexport var __N_SSG = true;\nexport default function Show() {\n  _s();\n\n  var userContext = useContext(UserContext);\n  console.log(post);\n  useEffect(function () {\n    var id = Number(window.location.pathname.split(\"/\")[2]);\n    return function () {// cleanup\n    };\n  }, []);\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"text-container\",\n    dangerouslySetInnerHTML: {\n      __html: post.content.rendered\n    }\n  }), __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", null, \"Return\")), post.author == userContext.loginState.id && __jsx(Link, {\n    href: \"[id]/edit\",\n    as: \"\".concat(post.id, \"/edit\")\n  }, __jsx(\"a\", null, \"Edit\")));\n} // return (\n//   <div>\n//     <div className=\"text-container\" dangerouslySetInnerHTML={{ __html: post.content.rendered }} />\n//     <Link href=\"/\"><a>Return</a></Link>\n//     {post.author == userContext.loginState.id && <Link href=\"[id]/edit\" as={`${post.id}/edit`}><a>Edit</a></Link>}\n//   </div>\n// )\n//      <h1>Title: {post.title.rendered}</h1>\n//      <p>Post time: {post.date}</p>\n//      <p>this is a show</p>\n//      <p>this is the content {JSON.stringify(post)}</p>\n// Show.getInitialProps = async (context) => {\n//   const {id} = context.query\n//   const res = await fetch(`http://wp:80/wp-json/wp/v2/posts/${id}`)\n//   const json = await res.json()\n//   return { post: json }\n// }\n\n_s(Show, \"99OIpNaJHwvZRpBnaYl6uFs7h2s=\");\n\n_c = Show;\n\nvar _c;\n\n$RefreshReg$(_c, \"Show\");","map":{"version":3,"sources":["/Users/jtweng/Desktop/record/OSU/mac/practice/docker/test/pages/posts/[id].js"],"names":["React","useContext","useEffect","Link","Nav","UserContext","Show","userContext","console","log","post","id","Number","window","location","pathname","split","__html","content","rendered","author","loginState"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,UAAd,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAAQC,WAAR,QAA0B,YAA1B;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC7B,MAAMC,WAAW,GAAGN,UAAU,CAACI,WAAD,CAA9B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AAEER,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMS,EAAE,GAAGC,MAAM,CAACC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAAD,CAAjB;AAEA,WAAO,YAAM,CACX;AACD,KAFD;AAGD,GANQ,EAMN,EANM,CAAT;AAQF,SACI,mBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAgC,IAAA,uBAAuB,EAAE;AAAEC,MAAAA,MAAM,EAAEP,IAAI,CAACQ,OAAL,CAAaC;AAAvB;AAAzD,IADF,EAEE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KAAe,0BAAf,CAFF,EAGGT,IAAI,CAACU,MAAL,IAAeb,WAAW,CAACc,UAAZ,CAAuBV,EAAtC,IAA4C,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,WAAX;AAAuB,IAAA,EAAE,YAAKD,IAAI,CAACC,EAAV;AAAzB,KAA8C,wBAA9C,CAH/C,CADJ;AAOD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAvCwBL,I;;KAAAA,I","sourcesContent":["import React,{useContext,useEffect} from 'react'\nimport Link from 'next/link'\nimport Nav from 'client/components/Nav'\nimport {UserContext} from 'pages/_app'\n\nexport default function Show() {\n  const userContext = useContext(UserContext)\n  console.log(post)\n\n    useEffect(() => {\n      const id = Number(window.location.pathname.split(\"/\")[2])\n\n      return () => {\n        // cleanup\n      }\n    }, [])\n\n  return (\n      <div>\n        <div className=\"text-container\" dangerouslySetInnerHTML={{ __html: post.content.rendered }} />\n        <Link href=\"/\"><a>Return</a></Link>\n        {post.author == userContext.loginState.id && <Link href=\"[id]/edit\" as={`${post.id}/edit`}><a>Edit</a></Link>}\n      </div>\n  )\n}\n\n// return (\n//   <div>\n//     <div className=\"text-container\" dangerouslySetInnerHTML={{ __html: post.content.rendered }} />\n//     <Link href=\"/\"><a>Return</a></Link>\n//     {post.author == userContext.loginState.id && <Link href=\"[id]/edit\" as={`${post.id}/edit`}><a>Edit</a></Link>}\n//   </div>\n// )\n\n\n//      <h1>Title: {post.title.rendered}</h1>\n//      <p>Post time: {post.date}</p>\n//      <p>this is a show</p>\n//      <p>this is the content {JSON.stringify(post)}</p>\n// Show.getInitialProps = async (context) => {\n//   const {id} = context.query\n//   const res = await fetch(`http://wp:80/wp-json/wp/v2/posts/${id}`)\n//   const json = await res.json()\n//   return { post: json }\n// }\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('http://localhost:80/wp-json/wp/v2/posts')\n  console.log(res)\n  const posts = await res.json()\n  console.log(posts)\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => `/posts/${post.id}`)\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`http://localhost/wp-json/wp/v2/posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return { props: { post } }\n}\n"]},"metadata":{},"sourceType":"module"}