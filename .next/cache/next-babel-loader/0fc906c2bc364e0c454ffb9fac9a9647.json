{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport useInput from 'client/hooks/useInput';\nimport { UserContext } from 'pages/index';\nimport Router from 'next/router';\nimport styles from '../styles/LoginForm.module.css';\n\nfunction LoginForm() {\n  _s();\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      email = _useInput2[0],\n      bindEmail = _useInput2[1],\n      resetEmail = _useInput2[2];\n\n  var _useInput3 = useInput(''),\n      _useInput4 = _slicedToArray(_useInput3, 3),\n      pass = _useInput4[0],\n      bindPass = _useInput4[1],\n      resetPass = _useInput4[2];\n\n  var userContext = useContext(UserContext);\n  var toeknUrl = process.env.getTokenUrl;\n\n  var submitHandler = function submitHandler(e) {\n    // ----------fetch version get token---------------\n    var requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: email,\n        password: pass\n      })\n    };\n    fetch(toeknUrl, requestOptions).then(function (resf) {\n      return resf.json();\n    }).then(function (data) {\n      if (data.token) {\n        // success login\n        console.log(data);\n        userContext.loginDispatch({\n          type: 'login',\n          token: data.token,\n          mail: email,\n          pass: pass\n        });\n        Router.push('/');\n      } else {\n        // wrong information\n        userContext.loginDispatch({\n          type: 'error',\n          error: 'wrong email or password'\n        });\n        resetEmail('');\n        resetPass('');\n      }\n    })[\"catch\"](function (err) {\n      // other errors\n      userContext.loginDispatch({\n        type: 'error',\n        error: error\n      });\n    }); // ------------------------------------------------\n\n    e.preventDefault();\n  };\n\n  return __jsx(\"div\", {\n    className: styles.formConatainer\n  }, __jsx(\"form\", {\n    onSubmit: submitHandler,\n    className: styles.form\n  }, userContext.loginState.error && !email && __jsx(\"h2\", null, \"wrong email or password\"), __jsx(\"div\", {\n    className: styles.formOption\n  }, __jsx(\"label\", null, \"E-mail: \"), __jsx(\"input\", _extends({}, bindEmail, {\n    type: \"text\",\n    className: styles.formOption\n  }))), __jsx(\"div\", {\n    className: styles.formOption\n  }, __jsx(\"label\", null, \"Password: \"), __jsx(\"input\", _extends({}, bindPass, {\n    type: \"text\",\n    className: styles.formOption\n  }))), __jsx(\"button\", {\n    className: styles.formSubmit\n  }, \"Submit\")));\n}\n\n_s(LoginForm, \"054f7QJtcPV13WN8GuWX1ffKR7I=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/Users/jtweng/Desktop/record/OSU/mac/practice/docker/test/client/components/LoginForm.js"],"names":["React","useContext","useInput","UserContext","Router","styles","LoginForm","email","bindEmail","resetEmail","pass","bindPass","resetPass","userContext","toeknUrl","process","env","getTokenUrl","submitHandler","e","requestOptions","method","headers","body","JSON","stringify","username","password","fetch","then","resf","json","data","token","console","log","loginDispatch","type","mail","push","error","err","preventDefault","formConatainer","form","loginState","formOption","formSubmit"],"mappings":"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","sourcesContent":["import React,{useContext} from 'react'\nimport useInput from 'client/hooks/useInput'\nimport {UserContext} from 'pages/index'\nimport Router from 'next/router'\nimport styles from '../styles/LoginForm.module.css'\n\nfunction LoginForm() {\n  const [email, bindEmail, resetEmail] = useInput('')\n  const [pass, bindPass, resetPass] = useInput('')\n  const userContext = useContext(UserContext)\n  const toeknUrl = process.env.getTokenUrl\n\n  const submitHandler = e => {\n    // ----------fetch version get token---------------\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username: email, password:pass })\n    };\n    fetch(toeknUrl, requestOptions)\n    .then(resf => resf.json())\n    .then(data => {\n      if(data.token){\n        // success login\n        console.log(data)\n        userContext.loginDispatch({type:'login', token:data.token, mail:email, pass:pass})\n        Router.push('/')\n      } else {\n        // wrong information\n        userContext.loginDispatch({type:'error', error:'wrong email or password'})\n        resetEmail('')\n        resetPass('')\n      }\n    })\n    .catch(err => {\n      // other errors\n      userContext.loginDispatch({type:'error', error:error})\n    })\n    // ------------------------------------------------\n    e.preventDefault()\n  }\n\n  return (\n    <div className={styles.formConatainer}>\n      <form onSubmit={submitHandler} className={styles.form}>\n        {userContext.loginState.error && !email && <h2>wrong email or password</h2>}\n        <div className={styles.formOption}>\n          <label>E-mail: </label>\n          <input {...bindEmail} type=\"text\" className={styles.formOption}/>\n        </div>\n        <div className={styles.formOption}>\n          <label >Password: </label>\n          <input {...bindPass} type=\"text\" className={styles.formOption}/>\n        </div>\n        <button className={styles.formSubmit}>Submit</button>\n      </form>\n    </div>\n  )\n}\n\nexport default LoginForm\n"]},"metadata":{},"sourceType":"module"}