{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport Link from 'next/link';\nimport Nav from 'client/components/Nav';\nimport { UserContext } from 'pages/_app';\nexport default function Show({\n  post\n}) {\n  const userContext = useContext(UserContext);\n  console.log(post);\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"text-container\",\n    dangerouslySetInnerHTML: {\n      __html: post.content.rendered\n    }\n  }), __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", null, \"Return\")), post.author == userContext.loginState.id && __jsx(Link, {\n    href: \"/posts/[id]/edit\",\n    as: `/posts/${post.id}/edit`\n  }, __jsx(\"a\", post, \"Edit\")));\n} //      <h1>Title: {post.title.rendered}</h1>\n//      <p>Post time: {post.date}</p>\n//      <p>this is a show</p>\n//      <p>this is the content {JSON.stringify(post)}</p>\n// Show.getInitialProps = async (context) => {\n//   const {id} = context.query\n//   const res = await fetch(`http://wp:80/wp-json/wp/v2/posts/${id}`)\n//   const json = await res.json()\n//   return { post: json }\n// }\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('http://localhost:80/wp-json/wp/v2/posts');\n  console.log(res);\n  const posts = await res.json();\n  console.log(posts); // Get the paths we want to pre-render based on posts\n\n  const paths = posts.map(post => `/posts/${post.id}`); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`http://localhost/wp-json/wp/v2/posts/${params.id}`);\n  const post = await res.json(); // Pass post data to the page via props\n\n  return {\n    props: {\n      post\n    }\n  };\n}","map":{"version":3,"sources":["/Users/jtweng/Desktop/record/OSU/mac/practice/docker/test/pages/posts/[id].js"],"names":["React","useContext","Link","Nav","UserContext","Show","post","userContext","console","log","__html","content","rendered","author","loginState","id","getStaticPaths","res","fetch","posts","json","paths","map","fallback","getStaticProps","params","props"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,UAAd,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAAQC,WAAR,QAA0B,YAA1B;AAEA,eAAe,SAASC,IAAT,CAAc;AAACC,EAAAA;AAAD,CAAd,EAAsB;AACnC,QAAMC,WAAW,GAAGN,UAAU,CAACG,WAAD,CAA9B;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,SACI,mBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAgC,IAAA,uBAAuB,EAAE;AAAEI,MAAAA,MAAM,EAAEJ,IAAI,CAACK,OAAL,CAAaC;AAAvB;AAAzD,IADJ,EAEE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KAAe,0BAAf,CAFF,EAGGN,IAAI,CAACO,MAAL,IAAeN,WAAW,CAACO,UAAZ,CAAuBC,EAAtC,IAA2C,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,kBAAX;AAA8B,IAAA,EAAE,EAAG,UAAST,IAAI,CAACS,EAAG;AAApD,KAA4D,WAAOT,IAAP,SAA5D,CAH9C,CADJ;AAOD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,eAAeU,cAAf,GAAgC;AACrC;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,yCAAD,CAAvB;AACAV,EAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACA,QAAME,KAAK,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAApB;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ,EALqC,CAOrC;;AACA,QAAME,KAAK,GAAGF,KAAK,CAACG,GAAN,CAAWhB,IAAD,IAAW,UAASA,IAAI,CAACS,EAAG,EAAtC,CAAd,CARqC,CAUrC;AACA;;AACA,SAAO;AAAEM,IAAAA,KAAF;AAASE,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC/C;AACA;AACA,QAAMR,GAAG,GAAG,MAAMC,KAAK,CAAE,wCAAuCO,MAAM,CAACV,EAAG,EAAnD,CAAvB;AACA,QAAMT,IAAI,GAAG,MAAMW,GAAG,CAACG,IAAJ,EAAnB,CAJ+C,CAM/C;;AACA,SAAO;AAAEM,IAAAA,KAAK,EAAE;AAAEpB,MAAAA;AAAF;AAAT,GAAP;AACD","sourcesContent":["import React,{useContext} from 'react'\nimport Link from 'next/link'\nimport Nav from 'client/components/Nav'\nimport {UserContext} from 'pages/_app'\n\nexport default function Show({post}) {\n  const userContext = useContext(UserContext)\n  console.log(post)\n  return (\n      <div>\n          <div className=\"text-container\" dangerouslySetInnerHTML={{ __html: post.content.rendered }} />\n        <Link href=\"/\"><a>Return</a></Link>\n        {post.author == userContext.loginState.id &&<Link href=\"/posts/[id]/edit\" as={`/posts/${post.id}/edit`}><a {...post}>Edit</a></Link>}\n      </div>\n  )\n}\n\n//      <h1>Title: {post.title.rendered}</h1>\n//      <p>Post time: {post.date}</p>\n//      <p>this is a show</p>\n//      <p>this is the content {JSON.stringify(post)}</p>\n// Show.getInitialProps = async (context) => {\n//   const {id} = context.query\n//   const res = await fetch(`http://wp:80/wp-json/wp/v2/posts/${id}`)\n//   const json = await res.json()\n//   return { post: json }\n// }\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('http://localhost:80/wp-json/wp/v2/posts')\n  console.log(res)\n  const posts = await res.json()\n  console.log(posts)\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => `/posts/${post.id}`)\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`http://localhost/wp-json/wp/v2/posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return { props: { post } }\n}\n"]},"metadata":{},"sourceType":"module"}