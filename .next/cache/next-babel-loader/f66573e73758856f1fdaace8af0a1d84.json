{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useEffect } from 'react';\nimport Link from 'next/link';\nimport Nav from 'client/components/Nav';\nimport { UserContext } from 'pages/_app';\nexport default function Show() {\n  const userContext = useContext(UserContext);\n  const postsUrl = process.env.getPostsUrl; // console.log(post)\n\n  useEffect(() => {\n    const id = Number(window.location.pathname.split(\"/\")[2]);\n    console.log(id);\n    fetch(postsUrl + `/${id}`).then(res => res.json()).then(data => {\n      // console.log(data)\n      resetTitle(data.slug);\n      resetContent(data.excerpt.rendered); // content = data.excerpt.rendered\n    }).catch(err => console.log(err));\n    return () => {// cleanup\n    };\n  }, []);\n  return __jsx(\"div\", null);\n} // return (\n//   <div>\n//     <div className=\"text-container\" dangerouslySetInnerHTML={{ __html: post.content.rendered }} />\n//     <Link href=\"/\"><a>Return</a></Link>\n//     {post.author == userContext.loginState.id && <Link href=\"[id]/edit\" as={`${post.id}/edit`}><a>Edit</a></Link>}\n//   </div>\n// )\n//      <h1>Title: {post.title.rendered}</h1>\n//      <p>Post time: {post.date}</p>\n//      <p>this is a show</p>\n//      <p>this is the content {JSON.stringify(post)}</p>\n// Show.getInitialProps = async (context) => {\n//   const {id} = context.query\n//   const res = await fetch(`http://wp:80/wp-json/wp/v2/posts/${id}`)\n//   const json = await res.json()\n//   return { post: json }\n// }\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('http://localhost:80/wp-json/wp/v2/posts');\n  console.log(res);\n  const posts = await res.json();\n  console.log(posts); // Get the paths we want to pre-render based on posts\n\n  const paths = posts.map(post => `/posts/${post.id}`); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`http://localhost/wp-json/wp/v2/posts/${params.id}`);\n  const post = await res.json(); // Pass post data to the page via props\n\n  return {\n    props: {\n      post\n    }\n  };\n}","map":{"version":3,"sources":["/Users/jtweng/Desktop/record/OSU/mac/practice/docker/test/pages/posts/[id].js"],"names":["React","useContext","useEffect","Link","Nav","UserContext","Show","userContext","postsUrl","process","env","getPostsUrl","id","Number","window","location","pathname","split","console","log","fetch","then","res","json","data","resetTitle","slug","resetContent","excerpt","rendered","catch","err","getStaticPaths","posts","paths","map","post","fallback","getStaticProps","params","props"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,UAAd,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAAQC,WAAR,QAA0B,YAA1B;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC7B,QAAMC,WAAW,GAAGN,UAAU,CAACI,WAAD,CAA9B;AACA,QAAMG,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAA7B,CAF6B,CAG7B;;AAEET,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,EAAE,GAAGC,MAAM,CAACC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAAD,CAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,EAAZ;AACAQ,IAAAA,KAAK,CAACZ,QAAQ,GAAE,IAAGI,EAAG,EAAjB,CAAL,CACCS,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAI;AACZ;AACAC,MAAAA,UAAU,CAACD,IAAI,CAACE,IAAN,CAAV;AACAC,MAAAA,YAAY,CAACH,IAAI,CAACI,OAAL,CAAaC,QAAd,CAAZ,CAHY,CAIZ;AACD,KAPD,EAQCC,KARD,CAQOC,GAAG,IAAEb,OAAO,CAACC,GAAR,CAAYY,GAAZ,CARZ;AASA,WAAO,MAAM,CACX;AACD,KAFD;AAGD,GAfQ,EAeN,EAfM,CAAT;AAiBF,SACI,kBADJ;AAOD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMV,GAAG,GAAG,MAAMF,KAAK,CAAC,yCAAD,CAAvB;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACA,QAAMW,KAAK,GAAG,MAAMX,GAAG,CAACC,IAAJ,EAApB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAYc,KAAZ,EALqC,CAOrC;;AACA,QAAMC,KAAK,GAAGD,KAAK,CAACE,GAAN,CAAWC,IAAD,IAAW,UAASA,IAAI,CAACxB,EAAG,EAAtC,CAAd,CARqC,CAUrC;AACA;;AACA,SAAO;AAAEsB,IAAAA,KAAF;AAASG,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC/C;AACA;AACA,QAAMjB,GAAG,GAAG,MAAMF,KAAK,CAAE,wCAAuCmB,MAAM,CAAC3B,EAAG,EAAnD,CAAvB;AACA,QAAMwB,IAAI,GAAG,MAAMd,GAAG,CAACC,IAAJ,EAAnB,CAJ+C,CAM/C;;AACA,SAAO;AAAEiB,IAAAA,KAAK,EAAE;AAAEJ,MAAAA;AAAF;AAAT,GAAP;AACD","sourcesContent":["import React,{useContext,useEffect} from 'react'\nimport Link from 'next/link'\nimport Nav from 'client/components/Nav'\nimport {UserContext} from 'pages/_app'\n\nexport default function Show() {\n  const userContext = useContext(UserContext)\n  const postsUrl = process.env.getPostsUrl\n  // console.log(post)\n\n    useEffect(() => {\n      const id = Number(window.location.pathname.split(\"/\")[2])\n      console.log(id)\n      fetch(postsUrl+`/${id}`)\n      .then(res => res.json())\n      .then(data => {\n        // console.log(data)\n        resetTitle(data.slug)\n        resetContent(data.excerpt.rendered)\n        // content = data.excerpt.rendered\n      })\n      .catch(err=>console.log(err))\n      return () => {\n        // cleanup\n      }\n    }, [])\n\n  return (\n      <div>\n        {/* <div className=\"text-container\" dangerouslySetInnerHTML={{ __html: post.content.rendered }} />\n        <Link href=\"/\"><a>Return</a></Link>\n        {post.author == userContext.loginState.id && <Link href=\"[id]/edit\" as={`${post.id}/edit`}><a>Edit</a></Link>} */}\n      </div>\n  )\n}\n\n// return (\n//   <div>\n//     <div className=\"text-container\" dangerouslySetInnerHTML={{ __html: post.content.rendered }} />\n//     <Link href=\"/\"><a>Return</a></Link>\n//     {post.author == userContext.loginState.id && <Link href=\"[id]/edit\" as={`${post.id}/edit`}><a>Edit</a></Link>}\n//   </div>\n// )\n\n\n//      <h1>Title: {post.title.rendered}</h1>\n//      <p>Post time: {post.date}</p>\n//      <p>this is a show</p>\n//      <p>this is the content {JSON.stringify(post)}</p>\n// Show.getInitialProps = async (context) => {\n//   const {id} = context.query\n//   const res = await fetch(`http://wp:80/wp-json/wp/v2/posts/${id}`)\n//   const json = await res.json()\n//   return { post: json }\n// }\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('http://localhost:80/wp-json/wp/v2/posts')\n  console.log(res)\n  const posts = await res.json()\n  console.log(posts)\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => `/posts/${post.id}`)\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`http://localhost/wp-json/wp/v2/posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return { props: { post } }\n}\n"]},"metadata":{},"sourceType":"module"}