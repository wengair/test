{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Link from 'next/link';\nimport axios from 'axios';\nvar POSTS_SERVICE_URL = 'http://wp:80/wp-json/wp/v2/posts';\n\nvar List = /*#__PURE__*/function (_Component) {\n  _inherits(List, _Component);\n\n  var _super = _createSuper(List);\n\n  function List() {\n    var _this;\n\n    _classCallCheck(this, List);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      // Initial state.\n      isFetching: false,\n      posts: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchPosts\", _this.fetchPostsAsync);\n\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"render\",\n    value: function render() {\n      var postList = this.state.posts.map(function (post) {\n        return __jsx(\"div\", null, __jsx(Link, {\n          href: \"/posts/[id]\",\n          as: \"/posts/\".concat(post.id)\n        }, __jsx(\"a\", {\n          key: post.id,\n          postData: \"\".concat(post)\n        }, __jsx(\"h2\", null, \"Title: \", post.title.rendered))), __jsx(\"p\", null, \"Status: \", post.status), __jsx(\"p\", null, \"Content: \", post.content.rendered));\n      });\n      return __jsx(\"div\", null, postList);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchPosts();\n    }\n  }, {\n    key: \"fetchPostsAsync\",\n    value: function () {\n      var _fetchPostsAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                  isFetching: true\n                })); // Sets loading state.\n\n                _context.next = 4;\n                return axios.get(POSTS_SERVICE_URL);\n\n              case 4:\n                response = _context.sent;\n                this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                  isFetching: false,\n                  posts: response.data\n                }));\n                _context.next = 12;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n                this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                  isFetching: false\n                }));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 8]]);\n      }));\n\n      function fetchPostsAsync() {\n        return _fetchPostsAsync.apply(this, arguments);\n      }\n\n      return fetchPostsAsync;\n    }()\n  }]);\n\n  return List;\n}(Component); // Next.js\n// const List = ({ posts }) => {\n//   const postList = posts.map(post =>\n//     <div>\n//       <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n//         <a key={post.id} postData={`${post}`}>\n//           <h2>Title: {post.title.rendered}</h2></a></Link>\n//       <p>Status: {post.status}</p>\n//       <p>Content: {post.content.rendered}</p>\n//     </div>)\n//   return <div>{postList}</div>\n// }\n// Next.js server side\n// List.getInitialProps = async ({ req }) => {\n//   const res = await fetch('http://wp:80/wp-json/wp/v2/posts')\n//   const json = await res.json()\n//   return { posts: json }\n// }\n// ----------------------\n// Next.js static\n// export async function getStaticProps() {\n//   // Call an external API endpoint to get posts\n//   const res = await fetch('http://wp:80/wp-json/wp/v2/posts')\n//   const posts = await res.json()\n//   // By returning { props: posts }, the Blog component\n//   // will receive `posts` as a prop at build time\n//   return {\n//     props: {\n//       posts,\n//     },\n//   }\n// }\n\n\nexport default List;","map":{"version":3,"sources":["/home/node/app/pages/posts/list.js"],"names":["React","Component","Link","axios","POSTS_SERVICE_URL","List","isFetching","posts","fetchPostsAsync","postList","state","map","post","id","title","rendered","status","content","fetchPosts","setState","get","response","data","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAMC,iBAAiB,GAAG,kCAA1B;;IAEMC,I;;;;;;;;;;;;;;;;4DACI;AACN;AACAC,MAAAA,UAAU,EAAE,KAFN;AAGNC,MAAAA,KAAK,EAAE;AAHD,K;;iEAqCK,MAAKC,e;;;;;;;6BA/BT;AACP,UAAMC,QAAQ,GAAG,KAAKC,KAAL,CAAWH,KAAX,CAAiBI,GAAjB,CAAqB,UAAAC,IAAI;AAAA,eACxC,mBACE,MAAC,IAAD;AAAM,UAAA,IAAI,EAAC,aAAX;AAAyB,UAAA,EAAE,mBAAYA,IAAI,CAACC,EAAjB;AAA3B,WACE;AAAG,UAAA,GAAG,EAAED,IAAI,CAACC,EAAb;AAAiB,UAAA,QAAQ,YAAKD,IAAL;AAAzB,WACE,6BAAYA,IAAI,CAACE,KAAL,CAAWC,QAAvB,CADF,CADF,CADF,EAIE,6BAAYH,IAAI,CAACI,MAAjB,CAJF,EAKE,8BAAaJ,IAAI,CAACK,OAAL,CAAaF,QAA1B,CALF,CADwC;AAAA,OAAzB,CAAjB;AAQA,aAAO,mBAAMN,QAAN,CAAP;AACD;;;wCAEmB;AAClB,WAAKS,UAAL;AACD;;;;;;;;;;;AAIG,qBAAKC,QAAL,iCAAmB,KAAKT,KAAxB;AAA+BJ,kBAAAA,UAAU,EAAE;AAA3C,oB,CAAoD;;;uBAC7BH,KAAK,CAACiB,GAAN,CAAUhB,iBAAV,C;;;AAAjBiB,gBAAAA,Q;AACN,qBAAKF,QAAL,iCACK,KAAKT,KADV;AAEEJ,kBAAAA,UAAU,EAAE,KAFd;AAGEC,kBAAAA,KAAK,EAAEc,QAAQ,CAACC;AAHlB;;;;;;;AAMAC,gBAAAA,OAAO,CAACC,GAAR;AACA,qBAAKL,QAAL,iCAAmB,KAAKT,KAAxB;AAA+BJ,kBAAAA,UAAU,EAAE;AAA3C;;;;;;;;;;;;;;;;;;;EAlCaL,S,GAwCnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeI,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport Link from 'next/link'\nimport axios from 'axios';\n\nconst POSTS_SERVICE_URL = 'http://wp:80/wp-json/wp/v2/posts';\n\nclass List extends Component {\n  state = {\n    // Initial state.\n    isFetching: false,\n    posts: []\n  };\n\n  render() {\n    const postList = this.state.posts.map(post =>\n      <div>\n        <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n          <a key={post.id} postData={`${post}`}>\n            <h2>Title: {post.title.rendered}</h2></a></Link>\n        <p>Status: {post.status}</p>\n        <p>Content: {post.content.rendered}</p>\n      </div>)\n    return <div>{postList}</div>\n  }\n\n  componentDidMount() {\n    this.fetchPosts();\n  }\n\n  async fetchPostsAsync() {\n    try {\n      this.setState({ ...this.state, isFetching: true }); // Sets loading state.\n      const response = await axios.get(POSTS_SERVICE_URL);\n      this.setState({\n        ...this.state,\n        isFetching: false,\n        posts: response.data\n      });\n    } catch (e) {\n      console.log(e);\n      this.setState({ ...this.state, isFetching: false });\n    }\n  }\n\n  fetchPosts = this.fetchPostsAsync;\n}\n// Next.js\n// const List = ({ posts }) => {\n//   const postList = posts.map(post =>\n//     <div>\n//       <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n//         <a key={post.id} postData={`${post}`}>\n//           <h2>Title: {post.title.rendered}</h2></a></Link>\n//       <p>Status: {post.status}</p>\n//       <p>Content: {post.content.rendered}</p>\n//     </div>)\n//   return <div>{postList}</div>\n// }\n// Next.js server side\n// List.getInitialProps = async ({ req }) => {\n//   const res = await fetch('http://wp:80/wp-json/wp/v2/posts')\n//   const json = await res.json()\n//   return { posts: json }\n// }\n// ----------------------\n// Next.js static\n// export async function getStaticProps() {\n//   // Call an external API endpoint to get posts\n//   const res = await fetch('http://wp:80/wp-json/wp/v2/posts')\n//   const posts = await res.json()\n\n//   // By returning { props: posts }, the Blog component\n//   // will receive `posts` as a prop at build time\n//   return {\n//     props: {\n//       posts,\n//     },\n//   }\n// }\n\nexport default List\n"]},"metadata":{},"sourceType":"module"}