{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nexport default function Show({\n  post\n}) {\n  console.log(post);\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    id: \"content\"\n  }, document.getElementById(\"content\").innerHTML = post.content.rendered), __jsx(Link, {\n    href: \"/posts/list\"\n  }, __jsx(\"a\", null, \"Return\")));\n} //      <h1>Title: {post.title.rendered}</h1>\n//      <p>Post time: {post.date}</p>\n//      <p>this is a show</p>\n//      <p>this is the content {JSON.stringify(post)}</p>\n// Show.getInitialProps = async (context) => {\n//   const {id} = context.query\n//   const res = await fetch(`http://wp:80/wp-json/wp/v2/posts/${id}`)\n//   const json = await res.json()\n//   return { post: json }\n// }\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('http://wp:80/wp-json/wp/v2/posts');\n  const posts = await res.json(); // Get the paths we want to pre-render based on posts\n\n  const paths = posts.map(post => `/posts/${post.id}`); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`http://wp:80/wp-json/wp/v2/posts/${params.id}`);\n  const post = await res.json(); // Pass post data to the page via props\n\n  return {\n    props: {\n      post\n    }\n  };\n}","map":{"version":3,"sources":["/home/node/app/pages/posts/[id].js"],"names":["Link","Show","post","console","log","document","getElementById","innerHTML","content","rendered","getStaticPaths","res","fetch","posts","json","paths","map","id","fallback","getStaticProps","params","props"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AAEA,eAAe,SAASC,IAAT,CAAc;AAACC,EAAAA;AAAD,CAAd,EAAsB;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,SACE,mBACE;AAAK,IAAA,EAAE,EAAC;AAAR,KACGG,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,SAAnC,GAA+CL,IAAI,CAACM,OAAL,CAAaC,QAD/D,CADF,EAIE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KAAyB,0BAAzB,CAJF,CADF;AAQD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,kCAAD,CAAvB;AACA,QAAMC,KAAK,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAApB,CAHqC,CAKrC;;AACA,QAAMC,KAAK,GAAGF,KAAK,CAACG,GAAN,CAAWd,IAAD,IAAW,UAASA,IAAI,CAACe,EAAG,EAAtC,CAAd,CANqC,CAQrC;AACA;;AACA,SAAO;AAAEF,IAAAA,KAAF;AAASG,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC/C;AACA;AACA,QAAMT,GAAG,GAAG,MAAMC,KAAK,CAAE,oCAAmCQ,MAAM,CAACH,EAAG,EAA/C,CAAvB;AACA,QAAMf,IAAI,GAAG,MAAMS,GAAG,CAACG,IAAJ,EAAnB,CAJ+C,CAM/C;;AACA,SAAO;AAAEO,IAAAA,KAAK,EAAE;AAAEnB,MAAAA;AAAF;AAAT,GAAP;AACD","sourcesContent":["import Link from 'next/link'\n\nexport default function Show({post}) {\n  console.log(post)\n  return (\n    <div>\n      <div id=\"content\">\n        {document.getElementById(\"content\").innerHTML = post.content.rendered}\n      </div>\n      <Link href=\"/posts/list\"><a>Return</a></Link>\n    </div>\n  )\n}\n\n//      <h1>Title: {post.title.rendered}</h1>\n//      <p>Post time: {post.date}</p>\n//      <p>this is a show</p>\n//      <p>this is the content {JSON.stringify(post)}</p>\n// Show.getInitialProps = async (context) => {\n//   const {id} = context.query\n//   const res = await fetch(`http://wp:80/wp-json/wp/v2/posts/${id}`)\n//   const json = await res.json()\n//   return { post: json }\n// }\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('http://wp:80/wp-json/wp/v2/posts')\n  const posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => `/posts/${post.id}`)\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`http://wp:80/wp-json/wp/v2/posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return { props: { post } }\n}\n"]},"metadata":{},"sourceType":"module"}