{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport Link from 'next/link';\nimport Nav from 'client/components/Nav';\nimport { UserContext } from 'pages/_app';\nexport var __N_SSG = true;\nexport default function Show(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var userContext = useContext(UserContext);\n  console.log(post);\n  useEffect(function () {\n    console.log(window.location);\n    return function () {\n      cleanup;\n    };\n  }, [input]);\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"text-container\",\n    dangerouslySetInnerHTML: {\n      __html: post.content.rendered\n    }\n  }), __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", null, \"Return\")), post.author == userContext.loginState.id && __jsx(Link, {\n    href: \"/posts/[id]/edit\",\n    as: \"/posts/\".concat(post.id, \"/edit\"),\n    other: 'haha'\n  }, __jsx(\"a\", null, \"Edit\")));\n} //      <h1>Title: {post.title.rendered}</h1>\n//      <p>Post time: {post.date}</p>\n//      <p>this is a show</p>\n//      <p>this is the content {JSON.stringify(post)}</p>\n// Show.getInitialProps = async (context) => {\n//   const {id} = context.query\n//   const res = await fetch(`http://wp:80/wp-json/wp/v2/posts/${id}`)\n//   const json = await res.json()\n//   return { post: json }\n// }\n\n_s(Show, \"99OIpNaJHwvZRpBnaYl6uFs7h2s=\");\n\n_c = Show;\n\nvar _c;\n\n$RefreshReg$(_c, \"Show\");","map":{"version":3,"sources":["/Users/jtweng/Desktop/record/OSU/mac/practice/docker/test/pages/posts/[id].js"],"names":["React","useContext","Link","Nav","UserContext","Show","post","userContext","console","log","useEffect","window","location","cleanup","input","__html","content","rendered","author","loginState","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,UAAd,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAAQC,WAAR,QAA0B,YAA1B;;AAEA,eAAe,SAASC,IAAT,OAAsB;AAAA;;AAAA,MAAPC,IAAO,QAAPA,IAAO;AACnC,MAAMC,WAAW,GAAGN,UAAU,CAACG,WAAD,CAA9B;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEAI,EAAAA,SAAS,CAAC,YAAM;AACdF,IAAAA,OAAO,CAACC,GAAR,CAAYE,MAAM,CAACC,QAAnB;AACA,WAAO,YAAM;AACXC,MAAAA,OAAO;AACR,KAFD;AAGD,GALQ,EAKN,CAACC,KAAD,CALM,CAAT;AAMA,SACI,mBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAgC,IAAA,uBAAuB,EAAE;AAAEC,MAAAA,MAAM,EAAET,IAAI,CAACU,OAAL,CAAaC;AAAvB;AAAzD,IADF,EAEE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KAAe,0BAAf,CAFF,EAGGX,IAAI,CAACY,MAAL,IAAeX,WAAW,CAACY,UAAZ,CAAuBC,EAAtC,IAA4C,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,kBAAX;AAA8B,IAAA,EAAE,mBAAYd,IAAI,CAACc,EAAjB,UAAhC;AAA4D,IAAA,KAAK,EAAE;AAAnE,KAA2E,wBAA3E,CAH/C,CADJ;AAOD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GA5BwBf,I;;KAAAA,I","sourcesContent":["import React,{useContext} from 'react'\nimport Link from 'next/link'\nimport Nav from 'client/components/Nav'\nimport {UserContext} from 'pages/_app'\n\nexport default function Show({post}) {\n  const userContext = useContext(UserContext)\n  console.log(post)\n\n  useEffect(() => {\n    console.log(window.location)\n    return () => {\n      cleanup\n    }\n  }, [input])\n  return (\n      <div>\n        <div className=\"text-container\" dangerouslySetInnerHTML={{ __html: post.content.rendered }} />\n        <Link href=\"/\"><a>Return</a></Link>\n        {post.author == userContext.loginState.id && <Link href=\"/posts/[id]/edit\" as={`/posts/${post.id}/edit`} other={'haha'}><a>Edit</a></Link>}\n      </div>\n  )\n}\n\n//      <h1>Title: {post.title.rendered}</h1>\n//      <p>Post time: {post.date}</p>\n//      <p>this is a show</p>\n//      <p>this is the content {JSON.stringify(post)}</p>\n// Show.getInitialProps = async (context) => {\n//   const {id} = context.query\n//   const res = await fetch(`http://wp:80/wp-json/wp/v2/posts/${id}`)\n//   const json = await res.json()\n//   return { post: json }\n// }\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('http://localhost:80/wp-json/wp/v2/posts')\n  console.log(res)\n  const posts = await res.json()\n  console.log(posts)\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => `/posts/${post.id}`)\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`http://localhost/wp-json/wp/v2/posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return { props: { post } }\n}\n"]},"metadata":{},"sourceType":"module"}