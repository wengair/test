{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport Nav from 'client/components/Nav';\nimport { UserContext } from 'pages/_app';\nexport default function Show() {\n  const userContext = useContext(UserContext);\n  const postsUrl = process.env.getPostsUrl;\n  const {\n    0: post,\n    1: setPost\n  } = useState(); // console.log(post)\n\n  useEffect(() => {\n    const id = Number(window.location.pathname.split(\"/\")[2]);\n    console.log(id);\n    fetch(postsUrl + `/${id}`).then(res => res.json()).then(post => {\n      console.log(post);\n      setPost(post);\n    }).catch(err => console.log(err));\n    return () => {// cleanup\n    };\n  }, []);\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"text-container\",\n    dangerouslySetInnerHTML: {\n      __html: content\n    }\n  }), __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", null, \"Return\")), post.author == userContext.loginState.id && __jsx(Link, {\n    href: \"[id]/edit\",\n    as: `${post.id}/edit`\n  }, __jsx(\"a\", null, \"Edit\")));\n} // return (\n//   <div>\n//     <div className=\"text-container\" dangerouslySetInnerHTML={{ __html: post.content.rendered }} />\n//     <Link href=\"/\"><a>Return</a></Link>\n//     {post.author == userContext.loginState.id && <Link href=\"[id]/edit\" as={`${post.id}/edit`}><a>Edit</a></Link>}\n//   </div>\n// )\n//      <h1>Title: {post.title.rendered}</h1>\n//      <p>Post time: {post.date}</p>\n//      <p>this is a show</p>\n//      <p>this is the content {JSON.stringify(post)}</p>\n// Show.getInitialProps = async (context) => {\n//   const {id} = context.query\n//   const res = await fetch(`http://wp:80/wp-json/wp/v2/posts/${id}`)\n//   const json = await res.json()\n//   return { post: json }\n// }\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('http://localhost:80/wp-json/wp/v2/posts');\n  console.log(res);\n  const posts = await res.json();\n  console.log(posts); // Get the paths we want to pre-render based on posts\n\n  const paths = posts.map(post => `/posts/${post.id}`); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`http://localhost/wp-json/wp/v2/posts/${params.id}`);\n  const post = await res.json(); // Pass post data to the page via props\n\n  return {\n    props: {\n      post\n    }\n  };\n}","map":{"version":3,"sources":["/Users/jtweng/Desktop/record/OSU/mac/practice/docker/test/pages/posts/[id].js"],"names":["React","useContext","useEffect","useState","Link","Nav","UserContext","Show","userContext","postsUrl","process","env","getPostsUrl","post","setPost","id","Number","window","location","pathname","split","console","log","fetch","then","res","json","catch","err","__html","content","author","loginState","getStaticPaths","posts","paths","map","fallback","getStaticProps","params","props"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,UAAd,EAAyBC,SAAzB,EAAmCC,QAAnC,QAAkD,OAAlD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAAQC,WAAR,QAA0B,YAA1B;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC7B,QAAMC,WAAW,GAAGP,UAAU,CAACK,WAAD,CAA9B;AACA,QAAMG,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAA7B;AACA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBX,QAAQ,EAAhC,CAH6B,CAI7B;;AAEED,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,EAAE,GAAGC,MAAM,CAACC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAAD,CAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,EAAZ;AACAQ,IAAAA,KAAK,CAACd,QAAQ,GAAE,IAAGM,EAAG,EAAjB,CAAL,CACCS,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMX,IAAI,IAAI;AACZQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACAC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KALD,EAMCc,KAND,CAMOC,GAAG,IAAEP,OAAO,CAACC,GAAR,CAAYM,GAAZ,CANZ;AAOA,WAAO,MAAM,CACX;AACD,KAFD;AAGD,GAbQ,EAaN,EAbM,CAAT;AAeF,SACI,mBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAgC,IAAA,uBAAuB,EAAE;AAAEC,MAAAA,MAAM,EAAEC;AAAV;AAAzD,IADF,EAEE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KAAe,0BAAf,CAFF,EAGGjB,IAAI,CAACkB,MAAL,IAAevB,WAAW,CAACwB,UAAZ,CAAuBjB,EAAtC,IAA4C,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,WAAX;AAAuB,IAAA,EAAE,EAAG,GAAEF,IAAI,CAACE,EAAG;AAAtC,KAA8C,wBAA9C,CAH/C,CADJ;AAOD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,eAAekB,cAAf,GAAgC;AACrC;AACA,QAAMR,GAAG,GAAG,MAAMF,KAAK,CAAC,yCAAD,CAAvB;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACA,QAAMS,KAAK,GAAG,MAAMT,GAAG,CAACC,IAAJ,EAApB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ,EALqC,CAOrC;;AACA,QAAMC,KAAK,GAAGD,KAAK,CAACE,GAAN,CAAWvB,IAAD,IAAW,UAASA,IAAI,CAACE,EAAG,EAAtC,CAAd,CARqC,CAUrC;AACA;;AACA,SAAO;AAAEoB,IAAAA,KAAF;AAASE,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC/C;AACA;AACA,QAAMd,GAAG,GAAG,MAAMF,KAAK,CAAE,wCAAuCgB,MAAM,CAACxB,EAAG,EAAnD,CAAvB;AACA,QAAMF,IAAI,GAAG,MAAMY,GAAG,CAACC,IAAJ,EAAnB,CAJ+C,CAM/C;;AACA,SAAO;AAAEc,IAAAA,KAAK,EAAE;AAAE3B,MAAAA;AAAF;AAAT,GAAP;AACD","sourcesContent":["import React,{useContext,useEffect,useState} from 'react'\nimport Link from 'next/link'\nimport Nav from 'client/components/Nav'\nimport {UserContext} from 'pages/_app'\n\nexport default function Show() {\n  const userContext = useContext(UserContext)\n  const postsUrl = process.env.getPostsUrl\n  const [post, setPost] = useState()\n  // console.log(post)\n\n    useEffect(() => {\n      const id = Number(window.location.pathname.split(\"/\")[2])\n      console.log(id)\n      fetch(postsUrl+`/${id}`)\n      .then(res => res.json())\n      .then(post => {\n        console.log(post)\n        setPost(post)\n      })\n      .catch(err=>console.log(err))\n      return () => {\n        // cleanup\n      }\n    }, [])\n\n  return (\n      <div>\n        <div className=\"text-container\" dangerouslySetInnerHTML={{ __html: content }} />\n        <Link href=\"/\"><a>Return</a></Link>\n        {post.author == userContext.loginState.id && <Link href=\"[id]/edit\" as={`${post.id}/edit`}><a>Edit</a></Link>}\n      </div>\n  )\n}\n\n// return (\n//   <div>\n//     <div className=\"text-container\" dangerouslySetInnerHTML={{ __html: post.content.rendered }} />\n//     <Link href=\"/\"><a>Return</a></Link>\n//     {post.author == userContext.loginState.id && <Link href=\"[id]/edit\" as={`${post.id}/edit`}><a>Edit</a></Link>}\n//   </div>\n// )\n\n\n//      <h1>Title: {post.title.rendered}</h1>\n//      <p>Post time: {post.date}</p>\n//      <p>this is a show</p>\n//      <p>this is the content {JSON.stringify(post)}</p>\n// Show.getInitialProps = async (context) => {\n//   const {id} = context.query\n//   const res = await fetch(`http://wp:80/wp-json/wp/v2/posts/${id}`)\n//   const json = await res.json()\n//   return { post: json }\n// }\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('http://localhost:80/wp-json/wp/v2/posts')\n  console.log(res)\n  const posts = await res.json()\n  console.log(posts)\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => `/posts/${post.id}`)\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`http://localhost/wp-json/wp/v2/posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return { props: { post } }\n}\n"]},"metadata":{},"sourceType":"module"}